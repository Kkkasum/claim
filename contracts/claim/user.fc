#include "../imports/stdlib.fc";
#include "../imports/user-utils.fc";
#include "../imports/op-codes.fc";
#include "../imports/error-codes.fc";

const const::claim_fee = 150000000;

(slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();

    return (
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref()       ;; user_address, claim_amount, last_transaction_time
    );
}

() save_data(slice admin_address, slice user_address, int claim_amount, int last_transaction_time) impure inline {
    cell user_data = pack_user_data(user_address, claim_amount, last_transaction_time);

    set_data(
        begin_cell()
            .store_slice(admin_address)
            .store_ref(user_data)
        .end_cell()
    );
}

() claim(slice admin_address, int claim_amount, slice recepient) impure inline {
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(admin_address)
        .store_coins(const::claim_fee)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::claim, 32)
        .store_uint(0, 64)
        .store_coins(claim_amount)
        .store_slice(recepient)
    .end_cell();

    send_raw_message(msg, 1);
}

() withdraw_all_ton(slice recepient) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6) ;; 010000
        .store_slice(recepient)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();

    send_raw_message(msg, 128 + 32);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_cell.begin_parse();

    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    in_msg_body~skip_bits(64); ;; skip query_id

    (slice admin_address, cell user_data) = load_data();
    (slice user_address, int claim_amount, int last_transaction_time) = unpack_user_data(user_data);

    if (op == op::claim) {
        throw_unless(error::access_denied, equal_slices(user_address, sender_address));
        throw_unless(error::not_enough_ton, msg_value >= const::claim_fee);
        throw_unless(error::not_yet, now() > last_transaction_time + 86400);

        claim(admin_address, claim_amount, sender_address);

        save_data(admin_address, user_address, claim_amount, now());

        return ();
    }

    ;; admin
    throw_unless(error::access_denied, equal_slices(sender_address, admin_address));

    if (op == op::boost) {
        int boost = in_msg_body~load_coins();
        claim_amount += boost;

        save_data(admin_address, user_address, claim_amount, last_transaction_time);

        return ();
    }

    if (op == op::withdraw_emergency) {
        withdraw_all_ton(admin_address);

        return ();
    }

    throw(0xffff);
}

int get_last_transaction_time() method_id {
    (_, cell user_data) = load_data();
    (_, _, int last_transaction_time) = unpack_user_data(user_data);

    return last_transaction_time;
}

int get_claim_fee() method_id {
    return const::claim_fee;
}

(slice, slice, int, int) get_storage() method_id {
    (slice admin_address, cell user_data) = load_data();
    (slice user_address, int claim_amount, int last_transaction_time) = unpack_user_data(user_data);

    return (admin_address, user_address, claim_amount, last_transaction_time);
}