#include "../imports/stdlib.fc";
#include "../imports/claim-utils.fc";
#include "../imports/op-codes.fc";
#include "../imports/error-codes.fc";
#include "../jetton/imports/jetton-utils.fc";
#include "../jetton/imports/op-codes.fc";

const const::tx_fee_send_jetton = 45000000;
const const::tx_fee_boost = 15000000;

(slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();

    return (
        ds~load_msg_addr(),    ;; admin_address
        ds~load_ref(),         ;; jetton_data
        ds~load_ref()          ;; user_contract_code  
    );
}

() save_data(slice admin_address, slice jetton_master_address, cell jetton_wallet_code, cell user_contract_code) impure inline {
    cell jetton_data = pack_jetton_data(jetton_master_address, jetton_wallet_code);

    set_data(
        begin_cell()
            .store_slice(admin_address)
            .store_ref(jetton_data)
            .store_ref(user_contract_code)
        .end_cell()
    );
}

() send_jetton(slice recepient, slice jetton_master_address, cell jetton_wallet_code, int amount) impure inline {
    slice jetton_wallet_address = calculate_user_jetton_wallet_address(my_address(), jetton_master_address, jetton_wallet_code);

    var msg = begin_cell()
        .store_uint(0x18, 6) ;; 011000
        .store_slice(jetton_wallet_address)
        .store_coins(const::tx_fee_send_jetton)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::transfer, 32)
        .store_uint(0, 64)
        .store_coins(amount)
        .store_slice(recepient)
        .store_uint(0, 2)
        .store_uint(0, 1)
        .store_coins(0)
        .store_uint(0, 1)
    .end_cell();

    send_raw_message(msg, 1); ;; paying fees, revert on errors
}

() send_ton(slice recepient, int amount, int mode) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6) ;; 010000
        .store_slice(recepient)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();

    send_raw_message(msg, mode);
}

() send_boost(slice user_address, cell user_contract_code, int boost) impure inline {
    slice user_contract_address = calculate_user_contract_address(my_address(), user_address, user_contract_code);

    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(user_contract_address)
        .store_coins(const::tx_fee_boost)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::boost, 32)
        .store_uint(0, 64)
        .store_coins(boost)
    .end_cell();

    send_raw_message(msg, 1);
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    in_msg_body~skip_bits(64); ;; skip query_id

    (slice admin_address, cell jetton_data, cell user_contract_code) = load_data();

    if (op == op::claim) {
        int claim_amount = in_msg_body~load_coins();
        slice recepient = in_msg_body~load_msg_addr();

        slice user_contract_address = calculate_user_contract_address(my_address(), recepient, user_contract_code);
        throw_unless(error::access_denied, equal_slices(sender_address, user_contract_address));

        (slice jetton_master_address, cell jetton_wallet_code) = unpack_jetton_data(jetton_data);
        send_jetton(recepient, jetton_master_address, jetton_wallet_code, claim_amount);

        return ();
    }

    throw_unless(error::access_denied, equal_slices(sender_address, admin_address));

    ;; admin
    if (op == op::first_claim) {
        int claim_amount = in_msg_body~load_coins();
        slice recepient = in_msg_body~load_msg_addr();

        (slice jetton_master_address, cell jetton_wallet_code) = unpack_jetton_data(jetton_data);
        send_jetton(recepient, jetton_master_address, jetton_wallet_code, claim_amount);

        return ();
    }

    if (op == op::boost) {
        slice user_address = in_msg_body~load_msg_addr();
        int boost = in_msg_body~load_coins();

        send_boost(user_address, user_contract_code, boost);

        return ();
    }

    ;; withdraw
    if (op == op::withdraw_ton) {
        int amount = in_msg_body~load_coins();
        [int balance, _] = get_balance();

        throw_unless(error::not_enough_ton, balance - amount > 0);

        send_ton(admin_address, amount, 1);

        return ();
    }

    if (op == op::withdraw_jetton) {
        int amount = in_msg_body~load_coins();

        (slice jetton_master_address, cell jetton_wallet_code) = unpack_jetton_data(jetton_data);
        send_jetton(admin_address, jetton_master_address, jetton_wallet_code, amount);

        return ();
    }

    if (op == op::withdraw_emergency) {
        int jetton_amount = in_msg_body~load_coins();

        (slice jetton_master_address, cell jetton_wallet_code) = unpack_jetton_data(jetton_data);
        send_jetton(admin_address, jetton_master_address, jetton_wallet_code, jetton_amount);

        send_ton(admin_address, 0, 128 + 32);

        return ();
    }

    throw(0xffff);
}

slice get_user_contract_address(slice user_address) method_id {
    (_, _, cell user_contract_code) = load_data();

    return calculate_user_contract_address(my_address(), user_address, user_contract_code);
}